
TOP-DOWN VS BOTTOM-UP DP

The way the bottom-up DP table is filled is different to that of the top-down DP memo table. In the top-down DP, the memo table entries are flled "as needed" through the 
recursion itself. In the bottom-up DP, we use a "correct DP table filling order" to compute the values such that the previous values needed to process the current cell have
already been obtained.

For most DP problems, these two styles are equally good and the decision to use a particular DP style is a matter of preference. However, for harder DP problems, one of 
the styles can be better than the other.

Consider the following list of pros and cons to better understand which style you should use when presented with a DP problem.

Top-Down:
  Pros:
    natural transformation from the normal complete search recursion
    computes sub-problems only when necessary ( can sometimes be faster )
  Cons:
    slower if many sub-problems are revisited due to function call overhead
    if there are M states, an O(M) table size is required, which can lead to MLE for some harder problems (there are tricks to work around this)
    
Bottom-Up:
  Pros:
    faster if many sub-problems are revisited as there is no overhead from recursive calls
    can save memory space with space-saving techniques
  Cons:
    for programmers who are inclined to recursion, this style may not be intuitive
    if there are M states, bottom-up DP has to visit and fill the values of all these M states
    
    
Source: Competitive Programming 3 by Steven and Felix Halim
